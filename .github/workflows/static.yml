<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CPD Advanced Performance Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            min-height: 100vh;
            padding: 2rem;
            position: relative;
            overflow-x: hidden;
        }

        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: rgba(96, 165, 250, 0.3);
            border-radius: 50%;
            animation: float 15s infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0) translateX(0); opacity: 0; }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { transform: translateY(-100vh) translateX(100px); opacity: 0; }
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            position: relative;
            z-index: 1;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        h1 {
            font-size: 2.5rem;
            color: #60a5fa;
            margin-bottom: 0.5rem;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from { transform: translateX(-50px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .theme-toggle {
            background: #1e293b;
            border: 2px solid #334155;
            border-radius: 50px;
            padding: 0.5rem 1.5rem;
            color: #e2e8f0;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1rem;
        }

        .theme-toggle:hover {
            background: #334155;
            border-color: #60a5fa;
            transform: scale(1.05);
        }

        .subtitle {
            color: #94a3b8;
            margin-bottom: 2rem;
            font-size: 1.1rem;
        }

        .section-header {
            font-size: 1.8rem;
            color: #60a5fa;
            margin: 3rem 0 1.5rem 0;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #334155;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .chart-type-selector {
            display: flex;
            gap: 0.5rem;
        }

        .chart-btn {
            background: #1e293b;
            border: 1px solid #334155;
            color: #94a3b8;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 0.875rem;
        }

        .chart-btn:hover {
            background: #334155;
            color: #60a5fa;
        }

        .chart-btn.active {
            background: #60a5fa;
            color: #0f172a;
            border-color: #60a5fa;
        }

        .cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .card {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border: 1px solid #334155;
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s;
            cursor: pointer;
            animation: fadeIn 0.5s ease-out forwards;
            opacity: 0;
        }

        @keyframes fadeIn {
            to { opacity: 1; }
        }

        .card:nth-child(1) { animation-delay: 0.1s; }
        .card:nth-child(2) { animation-delay: 0.2s; }
        .card:nth-child(3) { animation-delay: 0.3s; }
        .card:nth-child(4) { animation-delay: 0.4s; }
        .card:nth-child(5) { animation-delay: 0.5s; }

        .card:hover {
            transform: translateY(-5px);
            border-color: #60a5fa;
            box-shadow: 0 10px 30px rgba(96, 165, 250, 0.2);
        }

        .card-label {
            color: #94a3b8;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        .card-value {
            font-size: 2rem;
            font-weight: bold;
        }

        .card-value.blue { color: #60a5fa; }
        .card-value.green { color: #4ade80; }
        .card-value.yellow { color: #facc15; }
        .card-value.purple { color: #a78bfa; }
        .card-value.orange { color: #fb923c; }

        .chart-container {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border: 1px solid #334155;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            transition: all 0.3s;
        }

        .chart-container:hover {
            border-color: #60a5fa;
            box-shadow: 0 10px 30px rgba(96, 165, 250, 0.1);
        }

        .chart-container h2 {
            color: #e2e8f0;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }

        .chart-wrapper {
            position: relative;
            height: 400px;
        }

        .table-container {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border: 1px solid #334155;
            border-radius: 12px;
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .table-container h2 {
            color: #e2e8f0;
            padding: 1.5rem;
            font-size: 1.5rem;
        }

        .table-controls {
            padding: 0 1.5rem 1rem 1.5rem;
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .search-box {
            flex: 1;
            min-width: 200px;
        }

        .search-box input, .filter-box select {
            width: 100%;
            padding: 0.75rem 1rem;
            background: #0f172a;
            border: 1px solid #334155;
            border-radius: 8px;
            color: #e2e8f0;
            font-size: 0.875rem;
            transition: all 0.3s;
        }

        .search-box input:focus, .filter-box select:focus {
            outline: none;
            border-color: #60a5fa;
            box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
        }

        .search-box input::placeholder {
            color: #64748b;
        }

        .filter-box {
            min-width: 200px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        thead {
            background: #334155;
        }

        th {
            padding: 1rem 1.5rem;
            text-align: left;
            font-size: 0.75rem;
            color: #cbd5e1;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
        }

        th:hover {
            background: #3f4c5f;
            color: #60a5fa;
        }

        th.sortable::after {
            content: ' ⇅';
            opacity: 0.5;
        }

        th.sort-asc::after {
            content: ' ↑';
            opacity: 1;
            color: #60a5fa;
        }

        th.sort-desc::after {
            content: ' ↓';
            opacity: 1;
            color: #60a5fa;
        }

        th.right { text-align: right; }

        tbody tr {
            border-bottom: 1px solid #334155;
            transition: all 0.3s;
        }

        tbody tr:hover {
            background: #334155;
            transform: scale(1.01);
        }

        tbody tr.top-performer {
            background: linear-gradient(90deg, rgba(250, 204, 21, 0.1) 0%, transparent 100%);
        }

        td {
            padding: 1rem 1.5rem;
            font-size: 0.875rem;
        }

        td.rank { 
            color: #94a3b8;
            font-weight: 600;
        }

        td.rank.gold { color: #fbbf24; }
        td.rank.silver { color: #94a3b8; }
        td.rank.bronze { color: #fb923c; }

        td.officer { font-weight: 500; color: #e2e8f0; }
        td.arrests { color: #4ade80; font-weight: 600; text-align: right; }
        td.pay { color: #facc15; font-weight: 600; text-align: right; }
        td.bonus { color: #a78bfa; font-weight: 600; text-align: right; }
        td.total { color: #60a5fa; font-weight: 600; text-align: right; }

        .medal {
            display: inline-block;
            margin-right: 0.5rem;
            font-size: 1.2rem;
        }

        .progress-bar-container {
            width: 100%;
            height: 8px;
            background: #0f172a;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 0.5rem;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #60a5fa, #4ade80);
            border-radius: 4px;
            transition: width 1s ease-out;
        }

        .rank-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            margin-left: 0.5rem;
        }

        .badge-captain { background: #fbbf24; color: #0f172a; }
        .badge-sergeant { background: #a78bfa; color: #0f172a; }
        .badge-officer { background: #60a5fa; color: #0f172a; }
        .badge-rookie { background: #64748b; color: #e2e8f0; }

        .mvp-banner {
            background: linear-gradient(135deg, #fbbf24, #f59e0b);
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            text-align: center;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { box-shadow: 0 0 20px rgba(251, 191, 36, 0.5); }
            50% { box-shadow: 0 0 40px rgba(251, 191, 36, 0.8); }
        }

        .mvp-banner h3 {
            color: #0f172a;
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .mvp-banner .mvp-name {
            font-size: 2rem;
            font-weight: bold;
            color: #0f172a;
        }

        .mvp-banner .mvp-stats {
            color: #1e293b;
            margin-top: 0.5rem;
        }

        tfoot {
            background: #334155;
            font-weight: bold;
        }

        tfoot td {
            color: #e2e8f0;
        }

        .export-btn {
            background: #4ade80;
            border: none;
            color: #0f172a;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            font-size: 0.875rem;
        }

        .export-btn:hover {
            background: #22c55e;
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(74, 222, 128, 0.3);
        }

        body.light-mode {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            color: #0f172a;
        }

        body.light-mode .card,
        body.light-mode .chart-container,
        body.light-mode .table-container {
            background: #ffffff;
            border-color: #cbd5e1;
        }

        body.light-mode h1,
        body.light-mode .section-header {
            color: #0f172a;
        }

        body.light-mode .card-label,
        body.light-mode .subtitle {
            color: #475569;
        }

        body.light-mode thead {
            background: #e2e8f0;
        }

        body.light-mode th {
            color: #0f172a;
        }

        body.light-mode tbody tr {
            border-bottom-color: #cbd5e1;
        }

        body.light-mode tbody tr:hover {
            background: #f1f5f9;
        }

        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            h1 {
                font-size: 1.75rem;
            }

            .section-header {
                font-size: 1.5rem;
            }

            .chart-wrapper {
                height: 300px;
            }

            table {
                font-size: 0.75rem;
            }

            th, td {
                padding: 0.75rem 0.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="particles" id="particles"></div>
    
    <div class="container">
        <div class="header">
            <div>
                <h1>🚔 CPD Advanced Performance Dashboard</h1>
                <p class="subtitle">Base Pay: $300,000 per arrest</p>
            </div>
            <button class="theme-toggle" onclick="toggleTheme()">🌓 Toggle Theme</button>
        </div>

        <div id="mvpBanner"></div>

        <h2 class="section-header">
            📅 This Week's Arrests
            <div class="chart-type-selector">
                <button class="chart-btn active" onclick="changeChart('bar')">📊 Bar</button>
                <button class="chart-btn" onclick="changeChart('line')">📈 Line</button>
                <button class="chart-btn" onclick="changeChart('pie')">🥧 Pie</button>
                <button class="chart-btn" onclick="changeChart('doughnut')">🍩 Doughnut</button>
            </div>
        </h2>
        
        <div class="cards">
            <div class="card">
                <div class="card-label">Weekly Arrests</div>
                <div class="card-value green" id="weeklyArrests">0</div>
            </div>
        </div>

        <div class="chart-container">
            <h2>Weekly Arrests by Officer</h2>
            <div class="chart-wrapper">
                <canvas id="weeklyChart"></canvas>
            </div>
        </div>

        <div class="table-container">
            <h2>Weekly Breakdown</h2>
            <div class="table-controls">
                <div class="search-box">
                    <input type="text" id="weeklySearch" placeholder="🔍 Search officer names..." />
                </div>
                <div class="filter-box">
                    <select id="weeklyFilter" onchange="filterWeekly()">
                        <option value="all">All Officers</option>
                        <option value="top">Top Performers (10+)</option>
                        <option value="medium">Medium (5-9)</option>
                        <option value="low">New Officers (1-4)</option>
                    </select>
                </div>
                <button class="export-btn" onclick="exportToCSV('weekly')">📥 Export CSV</button>
            </div>
            <table>
                <thead>
                    <tr>
                        <th class="sortable" onclick="sortTable('weekly', 'rank')">Rank</th>
                        <th class="sortable" onclick="sortTable('weekly', 'officer')">Officer Name</th>
                        <th class="sortable right" onclick="sortTable('weekly', 'arrests')">Arrests</th>
                        <th class="sortable right" onclick="sortTable('weekly', 'basePay')">Base Pay</th>
                        <th class="sortable right" onclick="sortTable('weekly', 'bonus')">Bonus</th>
                        <th class="sortable right" onclick="sortTable('weekly', 'totalPay')">Total Pay</th>
                    </tr>
                </thead>
                <tbody id="weeklyTableBody"></tbody>
                <tfoot>
                    <tr>
                        <td colspan="2">TOTAL</td>
                        <td class="arrests" id="weeklyFooterArrests">0</td>
                        <td class="pay" id="weeklyFooterBasePay">$0</td>
                        <td class="bonus" id="weeklyFooterBonus">$0</td>
                        <td class="total" id="weeklyFooterTotal">$0</td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <h2 class="section-header">📊 Overall Summary (All Time)</h2>
        
        <div class="cards">
            <div class="card">
                <div class="card-label">Total Officers</div>
                <div class="card-value blue" id="overallOfficers">0</div>
            </div>
            <div class="card">
                <div class="card-label">Total Arrests</div>
                <div class="card-value green" id="overallArrests">0</div>
            </div>
            <div class="card">
                <div class="card-label">Total Base Pay</div>
                <div class="card-value yellow" id="overallBasePay">$0</div>
            </div>
            <div class="card">
                <div class="card-label">Total Bonuses</div>
                <div class="card-value purple" id="overallBonuses">$0</div>
            </div>
            <div class="card">
                <div class="card-label">Grand Total Pay</div>
                <div class="card-value blue" id="overallTotalPay">$0</div>
            </div>
        </div>

        <div class="table-container">
            <h2>Overall Performance</h2>
            <div class="table-controls">
                <div class="search-box">
                    <input type="text" id="overallSearch" placeholder="🔍 Search officer names..." />
                </div>
                <button class="export-btn" onclick="exportToCSV('overall')">📥 Export CSV</button>
            </div>
            <table>
                <thead>
                    <tr>
                        <th class="sortable" onclick="sortTable('overall', 'rank')">Rank</th>
                        <th class="sortable" onclick="sortTable('overall', 'officer')">Officer Name</th>
                        <th class="sortable right" onclick="sortTable('overall', 'arrests')">Total Arrests</th>
                    </tr>
                </thead>
                <tbody id="overallTableBody"></tbody>
                <tfoot>
                    <tr>
                        <td colspan="2">TOTAL</td>
                        <td class="arrests" id="overallFooterArrests">0</td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <script>
        const weeklyArrests = {
            'Desire Dawwk': 9,
            'VELLY BOOM': 12,
            'Dj jiggy Starboyi': 17,
            'Hotboy Joseph': 26,
            'Romane Anderson': 11,
            'Dark Law': 4,
            'Helmet Wizzy': 17,
            'stinga puku': 10,
            'Mister Smooth': 5,
            'David Brown': 7,
            'Darius Edge': 2,
            'dreziie Nyc': 1,
            'YOUNG ONE': 1,
             'skaii havin': 0
        };

        const bonuses = {
            'Desire Dawwk': 0,
            'VELLY BOOM': 0,
            'Dj jiggy Starboyi': 8666667,
            'Hotboy Joseph': 8666667,
            'Romane Anderson': 8666667,
            'Dark Law': 8666667,
            'Helmet Wizzy': 0,
            'stinga puku': 8666667,
            'Mister Smooth': 8666667,
            'David Brown': 8666667,
            'Darius Edge': 0,
            'dreziie Nyc': 0,
            'YOUNG ONE': 0,
            'skaii havin': 10666666
        };

        const payPerArrest = 300000;
        let currentChart = null;
        let currentChartType = 'bar';

        const weeklyData = Object.entries(weeklyArrests)
            .map(([officer, arrests]) => ({
                officer,
                arrests,
                basePay: arrests * payPerArrest,
                bonus: bonuses[officer] || 0,
                totalPay: (arrests * payPerArrest) + (bonuses[officer] || 0)
            }))
            .sort((a, b) => b.arrests - a.arrests);

        const totalWeeklyArrests = weeklyData.reduce((sum, item) => sum + item.arrests, 0);
        const totalWeeklyBasePay = weeklyData.reduce((sum, item) => sum + item.basePay, 0);
        const totalWeeklyBonuses = weeklyData.reduce((sum, item) => sum + item.bonus, 0);
        const totalWeeklyPay = totalWeeklyBasePay + totalWeeklyBonuses;

        function animateValue(id, start, end, duration, prefix = '', suffix = '') {
            const obj = document.getElementById(id);
            const range = end - start;
            const increment = end > start ? 1 : -1;
            const stepTime = Math.abs(Math.floor(duration / range));
            let current = start;
            const timer = setInterval(() => {
                current += increment;
                if (prefix === '$' && end > 1000000) {
                    obj.textContent = `${prefix}${(current / 1000000).toFixed(2)}M`;
                } else {
                    obj.textContent = `${prefix}${current.toLocaleString()}${suffix}`;
                }
                if (current === end) {
                    clearInterval(timer);
                }
            }, stepTime);
        }

        animateValue('weeklyArrests', 0, totalWeeklyArrests, 1000);
        animateValue('weeklyBasePay', 0, totalWeeklyBasePay, 1000, '$');
        animateValue('weeklyBonuses', 0, totalWeeklyBonuses, 1000, '$');
        animateValue('weeklyTotalPay', 0, totalWeeklyPay, 1000, '$');

        animateValue('overallOfficers', 0, weeklyData.length, 1000);
        animateValue('overallArrests', 0, totalWeeklyArrests, 1000);
        animateValue('overallBasePay', 0, totalWeeklyBasePay, 1000, '$');
        animateValue('overallBonuses', 0, totalWeeklyBonuses, 1000, '$');
        animateValue('overallTotalPay', 0, totalWeeklyPay, 1000, '$');

        const mvp = weeklyData[0];
        document.getElementById('mvpBanner').innerHTML = `
            <div class="mvp-banner">
                <h3>🏆 Weekly MVP 🏆</h3>
                <div class="mvp-name">${mvp.officer}</div>
                <div class="mvp-stats">${mvp.arrests} Arrests | $${mvp.totalPay.toLocaleString()} Total Pay</div>
            </div>
        `;

        function getRankBadge(arrests) {
            if (arrests >= 20) return '<span class="rank-badge badge-captain">CAPTAIN</span>';
            if (arrests >= 10) return '<span class="rank-badge badge-sergeant">SERGEANT</span>';
            if (arrests >= 5) return '<span class="rank-badge badge-officer">OFFICER</span>';
            return '<span class="rank-badge badge-rookie">ROOKIE</span>';
        }

        function createChart(type) {
            const ctx = document.getElementById('weeklyChart').getContext('2d');
            
            if (currentChart) {
                currentChart.destroy();
            }

            const config = {
                type: type,
                data: {
                    labels: weeklyData.map(d => d.officer),
                    datasets: [{
                        label: 'Arrests',
                        data: weeklyData.map(d => d.arrests),
                        backgroundColor: type === 'pie' || type === 'doughnut' ? 
                            weeklyData.map((_, i) => `hsl(${i * 30}, 70%, 60%)`) :
                            '#4ade80',
                        borderColor: type === 'pie' || type === 'doughnut' ? '#fff' : '#22c55e',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: '#e2e8f0',
                                font: { size: 12 }
                            },
                            display: type === 'pie' || type === 'doughnut'
                        },
                        tooltip: {
                            callbacks: {
                                afterLabel: (context) => {
                                    const item = weeklyData[context.dataIndex];
                                    return [
                                        `Base Pay: $${item.basePay.toLocaleString()}`,
                                        `Bonus: $${item.bonus.toLocaleString()}`,
                                        `Total: $${item.totalPay.toLocaleString()}`
                                    ];
                                }
                            }
                        }
                    },
                    scales: type !== 'pie' && type !== 'doughnut' ? {
                        x: {
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 11 },
                                maxRotation: 45,
                                minRotation: 45
                            },
                            grid: {
                                color: '#334155'
                            }
                        },
                        y: {
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#334155'
                            }
                        }
                    } : {}
                }
            };

            currentChart = new Chart(ctx, config);
        }

        createChart('bar');

        function changeChart(type) {
            currentChartType = type;
            document.querySelectorAll('.chart-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            createChart(type);
        }

        const maxArrests = weeklyData[0].arrests;
        const weeklyTableBody = document.getElementById('weeklyTableBody');
        weeklyData.forEach((item, index) => {
            const row = document.createElement('tr');
            if (index < 3) row.classList.add('top-performer');
            
            let rankClass = '';
            let medal = '';
            if (index === 0) { rankClass = 'gold'; medal = '<span class="medal">🥇</span>'; }
            else if (index === 1) { rankClass = 'silver'; medal = '<span class="medal">🥈</span>'; }
            else if (index === 2) { rankClass = 'bronze'; medal = '<span class="medal">🥉</span>'; }
            
            const progressPercent = (item.arrests / maxArrests) * 100;
            
            row.innerHTML = `
                <td class="rank ${rankClass}">${medal}#${index + 1}</td>
                <td class="officer">
                    ${item.officer}
                    ${getRankBadge(item.arrests)}
                    <div class="progress-bar-container">
                        <div class="progress-bar" style="width: ${progressPercent}%"></div>
                    </div>
                </td>
                <td class="arrests">${item.arrests}</td>
                <td class="pay">${item.basePay.toLocaleString()}</td>
                <td class="bonus">${item.bonus.toLocaleString()}</td>
                <td class="total">${item.totalPay.toLocaleString()}</td>
            `;
            weeklyTableBody.appendChild(row);
        });

        document.getElementById('weeklyFooterArrests').textContent = totalWeeklyArrests;
        document.getElementById('weeklyFooterBasePay').textContent = `${totalWeeklyBasePay.toLocaleString()}`;
        document.getElementById('weeklyFooterBonus').textContent = `${totalWeeklyBonuses.toLocaleString()}`;
        document.getElementById('weeklyFooterTotal').textContent = `${totalWeeklyPay.toLocaleString()}`;

        const overallTableBody = document.getElementById('overallTableBody');
        weeklyData.forEach((item, index) => {
            const row = document.createElement('tr');
            if (index < 3) row.classList.add('top-performer');
            
            let rankClass = '';
            let medal = '';
            if (index === 0) { rankClass = 'gold'; medal = '<span class="medal">🥇</span>'; }
            else if (index === 1) { rankClass = 'silver'; medal = '<span class="medal">🥈</span>'; }
            else if (index === 2) { rankClass = 'bronze'; medal = '<span class="medal">🥉</span>'; }
            
            const progressPercent = (item.arrests / maxArrests) * 100;
            
            row.innerHTML = `
                <td class="rank ${rankClass}">${medal}#${index + 1}</td>
                <td class="officer">
                    ${item.officer}
                    ${getRankBadge(item.arrests)}
                    <div class="progress-bar-container">
                        <div class="progress-bar" style="width: ${progressPercent}%"></div>
                    </div>
                </td>
                <td class="arrests">${item.arrests}</td>
            `;
            overallTableBody.appendChild(row);
        });

        document.getElementById('overallFooterArrests').textContent = totalWeeklyArrests;

        document.getElementById('weeklySearch').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('#weeklyTableBody tr');
            
            rows.forEach(row => {
                const officerName = row.querySelector('.officer').textContent.toLowerCase();
                row.style.display = officerName.includes(searchTerm) ? '' : 'none';
            });
        });

        document.getElementById('overallSearch').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('#overallTableBody tr');
            
            rows.forEach(row => {
                const officerName = row.querySelector('.officer').textContent.toLowerCase();
                row.style.display = officerName.includes(searchTerm) ? '' : 'none';
            });
        });

        function filterWeekly() {
            const filter = document.getElementById('weeklyFilter').value;
            const rows = document.querySelectorAll('#weeklyTableBody tr');
            
            rows.forEach(row => {
                const arrests = parseInt(row.querySelector('.arrests').textContent);
                let show = true;
                
                if (filter === 'top') show = arrests >= 10;
                else if (filter === 'medium') show = arrests >= 5 && arrests < 10;
                else if (filter === 'low') show = arrests < 5;
                
                row.style.display = show ? '' : 'none';
            });
        }

        let sortOrders = {};
        function sortTable(tableType, column) {
            const tbody = document.getElementById(tableType + 'TableBody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            if (!sortOrders[tableType]) sortOrders[tableType] = {};
            sortOrders[tableType][column] = !sortOrders[tableType][column];
            const ascending = sortOrders[tableType][column];
            
            document.querySelectorAll(`#${tableType}TableBody`).forEach(t => {
                t.closest('table').querySelectorAll('th').forEach(th => {
                    th.classList.remove('sort-asc', 'sort-desc');
                });
            });
            
            event.target.classList.add(ascending ? 'sort-asc' : 'sort-desc');
            
            rows.sort((a, b) => {
                let aVal, bVal;
                
                if (column === 'rank') {
                    aVal = parseInt(a.querySelector('.rank').textContent.replace(/[^0-9]/g, ''));
                    bVal = parseInt(b.querySelector('.rank').textContent.replace(/[^0-9]/g, ''));
                } else if (column === 'officer') {
                    aVal = a.querySelector('.officer').textContent.trim();
                    bVal = b.querySelector('.officer').textContent.trim();
                } else if (column === 'arrests') {
                    aVal = parseInt(a.querySelector('.arrests').textContent);
                    bVal = parseInt(b.querySelector('.arrests').textContent);
                } else if (column === 'basePay' || column === 'bonus' || column === 'totalPay') {
                    const cells = a.querySelectorAll('td');
                    const bCells = b.querySelectorAll('td');
                    if (column === 'basePay') {
                        aVal = parseInt(cells[3].textContent.replace(/[$,]/g, ''));
                        bVal = parseInt(bCells[3].textContent.replace(/[$,]/g, ''));
                    } else if (column === 'bonus') {
                        aVal = parseInt(cells[4].textContent.replace(/[$,]/g, ''));
                        bVal = parseInt(bCells[4].textContent.replace(/[$,]/g, ''));
                    } else if (column === 'totalPay') {
                        aVal = parseInt(cells[5].textContent.replace(/[$,]/g, ''));
                        bVal = parseInt(bCells[5].textContent.replace(/[$,]/g, ''));
                    }
                }
                
                if (typeof aVal === 'string') {
                    return ascending ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
                }
                return ascending ? aVal - bVal : bVal - aVal;
            });
            
            rows.forEach(row => tbody.appendChild(row));
        }

        function exportToCSV(tableType) {
            let csv = [];
            const table = document.querySelector(`#${tableType}TableBody`).closest('table');
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim());
            csv.push(headers.join(','));
            
            const rows = Array.from(table.querySelectorAll('tbody tr')).filter(row => row.style.display !== 'none');
            rows.forEach(row => {
                const cols = Array.from(row.querySelectorAll('td')).map(td => {
                    let text = td.textContent.trim();
                    text = text.replace(/🥇|🥈|🥉/g, '').replace(/CAPTAIN|SERGEANT|OFFICER|ROOKIE/g, '').trim();
                    return `"${text}"`;
                });
                csv.push(cols.join(','));
            });
            
            const csvContent = csv.join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `cpd_${tableType}_data.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        function toggleTheme() {
            document.body.classList.toggle('light-mode');
        }

        for (let i = 0; i < 30; i++) {
            const particle = document.createElement('div');
            particle.classList.add('particle');
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 15 + 's';
            particle.style.animationDuration = (Math.random() * 10 + 10) + 's';
            document.getElementById('particles').appendChild(particle);
        }
    </script>
</body>
</html>
